/* ************************************************************************** */
[ check_map.c ]: _check_lines()

// case 1
	i = 0;
	while (new->map[idx][i])
	{
		if (idx == 0 || idx == new->height - 1)
			if (new->map[idx][i] != '1')
				error_map("map: not surrounded by walls\n");
		else
			if (_is_valid_value(new, new->map[idx][i], i) == FALSE)
				error_map("map: invalid value\n");
		i++;
	}

// case 2
	i = -1;
	if (idx == 0 || idx == new->height - 1)
		while (new->map[idx][++i])
			if (new->map[idx][i] != '1')
				error_map("map: not surrounded by walls\n");
	else
		while (new->map[idx][++i])
			if (_is_valid_value(new, new->map[idx][i], i) == FALSE)
				error_map("map: invalid value\n");

/* ************************************************************************** */
[ check_map.c ]: not using get_next_line functions

static void	_parse_map_from_file(int fd, t_maps *new)
{// map에 마지막이 enter인 경우 따로 다시 고려
	char	*string;
	char	*line;
	char	*tmp;

	string = NULL;
	while (TRUE)
	{
		line = get_next_line(fd);
		if (line == NULL)	// condition of breaking loop
			break ;
		string = _join_with_line(string, line);
		if (string == NULL)
			error_map(new, "map: empty file!\n");
	}
	new->map = ft_split(string, '\n');
	free (string);
	if (new->map == NULL || new->map[0] == NULL)
		error_map(new, "map: empty file!\n");
}

static char	*_join_with_line(char *string, char *line)
{
	char	*new_string;

	if (string == NULL)
		return (line);
	new_string = ft_strjoin(string, line);
	free (string);
	free (line);
	if (new_string == NULL)
		exit (EXIT_FAILURE);	// fail in strjoin
	if (*new_string == 0)
	{
		free (new_string);
		return (NULL);
	}
	return (new_string);
}
